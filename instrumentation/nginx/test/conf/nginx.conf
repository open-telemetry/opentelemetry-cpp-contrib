load_module /usr/share/nginx/modules/otel_ngx_module.so;

events {}

http {
  opentelemetry_config /conf/otel-nginx.toml;
  opentelemetry_operation_name otel_test;
  opentelemetry_ignore_paths ignored.php;
  access_log stderr;
  error_log stderr debug;

  upstream node-backend {
    server node-backend:3500;
  }

  server {
    listen 8000;
    server_name otel_test;

    root /var/www/html;

    opentelemetry_attribute "test.attrib.global" "global";
    opentelemetry_attribute "test.attrib.custom" "global-custom";

    location = / {
      opentelemetry_operation_name simple_backend;
      opentelemetry_propagate;
      proxy_pass http://node-backend/;
    }

    location = /up {
      opentelemetry off;
      return 200 "ok\n";
    }

    location = /b3 {
      opentelemetry_operation_name test_b3;
      opentelemetry_propagate b3;
      proxy_pass http://node-backend/b3;
    }

    location = /off {
      opentelemetry off;
      proxy_pass http://node-backend/off;
    }

    location = /distrust_incoming_spans {
      opentelemetry_trust_incoming_spans off;
      return 200 "";
    }

    location = /no_operation_name {
      return 200 "";
    }

    location = /capture_headers {
      opentelemetry_capture_headers on;
      add_header Response-Header Response-Value;
      return 200 "";
    }

    location = /capture_headers_with_sensitive_header_name {
      opentelemetry_capture_headers on;
      opentelemetry_sensitive_header_names "header";
      add_header Response-Header Foo;
      return 200 "";
    }

    location = /capture_headers_with_sensitive_header_value {
      opentelemetry_capture_headers on;
      opentelemetry_sensitive_header_values "value";
      add_header Bar Response-Value;
      return 200 "";
    }

    location /attrib {
      opentelemetry_attribute "test.attrib.script" "$msec";
      opentelemetry_attribute "test.attrib.custom" "local";
      return 200 "";
    }

    location /context {
      add_header Context-TraceParent "$opentelemetry_context_traceparent";
      return 200 "";
    }

    location /trace_id {
      add_header Trace-Id "$opentelemetry_trace_id";
      return 200 "";
    }

    location /span_id {
      add_header Span-Id "$opentelemetry_span_id";
      return 200 "";
    }

    location /files/ {
      opentelemetry_operation_name file_access;
      try_files $uri =404; 
    }

    location /redirect_301/ {
      # Requests on /redirect_301 should result in a redirect to /redirect_301/
      # The 301 redirect will  not be traced because it happens at an earlier
      # processing phase. So the variable will be null and the header should not
      # be set.
      # This covers an issue with the worker process crashing when the variable
      # was used in a 301 request
      # (https://github.com/open-telemetry/opentelemetry-cpp-contrib/issues/105)
      add_header Trace-Id "$opentelemetry_trace_id";
      proxy_pass http://node-backend/off;
    }

    location = /route_to_internal {
      rewrite /route_to_internal /internal_request last;
    }

    location = /internal_request {
      # This covers an issue with the worker process crashing
      # (https://github.com/open-telemetry/opentelemetry-cpp-contrib/issues/105)
      add_header Trace-Id "$opentelemetry_trace_id";
      internal;
      return 200 "";
    }

    location ~ \.php$ {
      include /etc/nginx/fastcgi_params;
      root /var/www/html/php;
      opentelemetry_operation_name php_fpm_backend;
      opentelemetry_propagate;
      fastcgi_pass php-backend:9000;
    }
  } 
}
